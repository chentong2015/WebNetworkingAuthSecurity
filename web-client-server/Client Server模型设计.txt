TODO. Client Server模型设计规范
1. 发送的请求timeout如何处理 ? .timeout(Duration.ofMinutes(3))
2. 连接失败是否有retry自动重新连接 ? feign.Retryer自定义
3. 服务端返回带有特定错误状态的回复 ? ResponseEntity(HttpStatusCode status)
4. 耗时请求如何避免出现阻塞 ? .sendAsync + callback
   客户端发送的请求可能是耗时操作，服务端没有办法返回ResponseData
   - Reactive 通过订阅方式，相应式编程
   httpClient.sendAsync(request, responseInfo -> new EventSubscriber())
   - Callback 通过回调方式，请求结束会调用回调方法
   httpAsyncClient.execute(post, FutureCallback());

TODO. 客户端<异步>获取消息更新的技术 ?
Make large payload exchange between HTTP services more efficient
Allow a client to receive messages about asynchronous updates from a server
1. Client Pull:
   A client periodically requests a server for updates
   - Short polling: 发送请求，server端返回指定的response之后，确定关闭
   - Long polling:
     The long polling request can timeout or can receive a disconnect from the server,
     in that case, the client has to open a new request.
     发送请求，在等到更新之前不关闭连接，如果在timeout时间内没有更新，发送特殊的Response

2. Server Push:
   A server proactively sends messages to clients immediately after they are available
   - Server-Sent Events:
     Send text messages only from a server to clients in browser-based web
   - WebSocket:
     Simultaneous, bi-directional, real-time communication in web app
     based on a protocol other than HTTP(proxy servers, NATs, firewalls, etc)
     Allow both the server and the client to push messages at any time
     without any relation to a previous request.

https://en.wikipedia.org/wiki/Push_technology